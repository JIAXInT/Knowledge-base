import{_ as s,v as a,b as p,R as o}from"./chunks/framework.eb2f4134.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Nest/第72章—使用compodoc生成文档.md","filePath":"docs/Nest/第72章—使用compodoc生成文档.md"}'),n={name:"docs/Nest/第72章—使用compodoc生成文档.md"},c=o(`<p>Nest 项目会有很多模块，模块之间相互依赖，模块内有 controller、service 等。</p><p>当项目复杂之后，模块之间的关系错综复杂。</p><p>这时候我们可以用 compodoc 生成一份文档，把依赖关系可视化。</p><p>compodoc 本来是给 angular 项目生成项目文档的，但是因为 angular 和 nest 项目结构类似，所以也支持了 nest。</p><p>我们创建个项目：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">nest new compodoc-test</span></span></code></pre></div><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-1.png" alt=""></p><p>安装 compodoc：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install --save-dev @compodoc/compodoc</span></span></code></pre></div><p>然后生成一份文档：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npx @compodoc/compodoc -p tsconfig.json -s -o</span></span></code></pre></div><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-2.png" alt=""></p><p>这个 README 就是项目下的 README.md:</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-3.png" alt=""></p><p>改一下 READMD.md，然后重新执行命令生成：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-4.png" alt=""></p><p>可以看到页面上的也变了：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-5.png" alt=""></p><p>overview 部分上面是依赖图，下面是项目有几个模块、controller，可注入的 provider</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-6.png" alt=""></p><p>我们在项目下加几个模块：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">nest g resource aaa</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">nest g resource bbb</span></span></code></pre></div><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-7.png" alt=""></p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-8.png" alt=""></p><p>在 AaaModule 里把 AaaService 导出：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-9.png" alt=""></p><p>然后 BbbModule 引入 AaaModule：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-10.png" alt=""></p><p>在 BbbService 里注入 AaaService：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-11.png" alt=""></p><p>先跑起来看一下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm run start:dev</span></span></code></pre></div><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-12.png" alt=""></p><p>没啥问题：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-13.png" alt=""></p><p>类似这种依赖关系，compodoc 可视化之后是什么样的呢？</p><p>重新跑一下 compodoc：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npx @compodoc/compodoc -p tsconfig.json -s -o</span></span></code></pre></div><p>依赖可视化是这样的：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-14.png" alt=""></p><p>用不同的颜色表示 Module、Provider、Exports 等。</p><p>可以看到 AppModule 引入了 AaaModule、BbbModule。</p><p>AaaModule 导出了 AaaService。</p><p>以及每个模块的 provider。</p><p>都可以可视化的看到。</p><p>点击左侧的 Modules，可以看到每个模块的可视化分析：</p><p>AaaModule：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-15.png" alt=""></p><p>BbbModule： <img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-16.png" alt=""></p><p>AppModule：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-17.png" alt=""></p><p>当然，我们这个例子还是比较简单，当项目依赖复杂之后，这个可视化还是比较有用的。</p><p>此外，可以看到每个 Controller、Service 或者其他的 class 的属性、方法，点进去可以看到方法的参数、返回值等：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-18.png" alt=""></p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-19.png" alt=""></p><p>当新人接手这个项目的时候，可以通过这份文档快速了解项目的结构。</p><p>回过头来，我们看下 compodoc 的一些 cli 选项：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npx @compodoc/compodoc -p tsconfig.json -s -o</span></span></code></pre></div><p>-p 是指定 tsconfig 文件</p><p>-s 是启动静态服务器</p><p>-o 是打开浏览器</p><p>更多选项在 <a href="https://compodoc.app/guides/options.html" target="_blank" rel="noreferrer">compodoc 文档</a>里可以看到:</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-20.png" alt="image.png"></p><p>比如 --theme 可以指定主题，一共有 gitbook,aravel, original, material, postmark, readthedocs, stripe, vagrant 这 8 个主题：</p><p>跑一下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npx @compodoc/compodoc -p tsconfig.json -s -o --theme postmark</span></span></code></pre></div><p>可以看到文档主题换了：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-21.png" alt=""></p><p>选项还是挺多的，如果都写在命令行也不现实，compodoc 同样支持配置文件。</p><p>我们在项目下添加一个 .compodoc.json 的文件：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">port</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8888</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">theme</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">postmark</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>然后再跑下 compodoc：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npx @compodoc/compodoc -p tsconfig.json -s -o -c .compodoc.json</span></span></code></pre></div><p>可以看到，配置生效了：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-22.png" alt=""></p><p>文档里写的这些 cli options，基本都可以写在配置文件里。</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/第72章-23.png" alt=""></p><p>不过一般也不咋用配置。</p><p>案例代码上传了<a href="https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/compodoc-test" target="_blank" rel="noreferrer">小册仓库</a>。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>我们学习了用 compodoc 生成 nest 项目的文档，它会列出项目的模块，可视化展示模块之间的依赖关系，展示每个模块下的 provider、exports 等。</p><p>对于新人接手项目来说，还是比较有用的。</p><p>而且可视化分析依赖和模块结构，对于复杂项目来说，是比较有帮助的。</p><p>compodoc 算是一个不错的 nest 相关的工具。</p>`,84),e=[c];function l(i,t,g,r,d,m){return a(),p("div",null,e)}const y=s(n,[["render",l]]);export{h as __pageData,y as default};
