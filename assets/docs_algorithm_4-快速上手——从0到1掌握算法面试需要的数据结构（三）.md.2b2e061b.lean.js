import{_ as e,v as a,b as s,R as t}from"./chunks/framework.eb2f4134.js";const o="/Knowledge-base/assets/1.65ca59ca.jpg",l="/Knowledge-base/assets/2.313c5a92.jpg",i="/Knowledge-base/assets/3.68a7fdd2.jpg",r="/Knowledge-base/assets/4.944e7fce.jpg",p="/Knowledge-base/assets/5.ff594026.jpg",n="/Knowledge-base/assets/6.fb653744.jpg",v=JSON.parse('{"title":"快速上手——从 0 到 1 掌握算法面试需要的数据结构（三）","description":"","frontmatter":{},"headers":[],"relativePath":"docs/algorithm/4-快速上手——从0到1掌握算法面试需要的数据结构（三）.md","filePath":"docs/algorithm/4-快速上手——从0到1掌握算法面试需要的数据结构（三）.md"}'),_={name:"docs/algorithm/4-快速上手——从0到1掌握算法面试需要的数据结构（三）.md"},c=t('<h1 id="快速上手——从-0-到-1-掌握算法面试需要的数据结构-三" tabindex="-1">快速上手——从 0 到 1 掌握算法面试需要的数据结构（三） <a class="header-anchor" href="#快速上手——从-0-到-1-掌握算法面试需要的数据结构-三" aria-label="Permalink to &quot;快速上手——从 0 到 1 掌握算法面试需要的数据结构（三）&quot;">​</a></h1><p>本节我们一起来认识一下树与二叉树。</p><h2 id="理解树结构" tabindex="-1">理解树结构 <a class="header-anchor" href="#理解树结构" aria-label="Permalink to &quot;理解树结构&quot;">​</a></h2><p>在理解计算机世界的树结构之前，大家不妨回忆一下现实世界中的树有什么特点：一棵树往往只有一个树根，向上生长后，却可以伸展出无数的树枝、树枝上会长出树叶。由树根从泥土中吸收水、无机盐等营养物质，源源不断地输送到树枝与树叶的那一端。一棵树往往呈现这样的基本形态：</p><p><img src="'+o+'" alt=""><br> 数据结构中的树，首先是对现实世界中树的一层简化：把树根抽象为“根结点”，树枝抽象为“边”，树枝的两个端点抽象为“结点”，树叶抽象为“叶子结点”。抽象后的树结构如下：</p><p><img src="'+l+'" alt=""><br> 把这棵抽象后的树颠倒一下，就得到了计算机中的树结构：</p><p><img src="'+i+'" alt=""></p><p>结合这张图，我们来讲解树的关键特性和重点概念。希望大家可以牢记以下几点：</p><ul><li>树的层次计算规则：根结点所在的那一层记为第一层，其子结点所在的就是第二层，以此类推。</li><li>结点和树的“高度”计算规则：叶子结点高度记为 1，每向上一层高度就加 1，逐层向上累加至目标结点时，所得到的的值就是目标结点的高度。树中结点的最大高度，称为“树的高度”。</li><li>“度”的概念：一个结点开叉出去多少个子树，被记为结点的“度”。比如我们上图中，根结点的“度”就是 3。</li><li>“叶子结点”：叶子结点就是度为 0 的结点。在上图中，最后一层的结点的度全部为 0，所以这一层的结点都是叶子结点。</li></ul><h2 id="理解二叉树结构" tabindex="-1">理解二叉树结构 <a class="header-anchor" href="#理解二叉树结构" aria-label="Permalink to &quot;理解二叉树结构&quot;">​</a></h2><p>二叉树是指满足以下要求的树：</p><ul><li>它可以没有根结点，作为一棵空树存在</li><li>如果它不是空树，那么 <strong>必须由根结点、左子树和右子树组成，且左右子树都是二叉树</strong> 。如下图：</li></ul><p><img src="'+r+`" alt=""><br> 注意， <strong>二叉树不能被简单定义为每个结点的度都是 2 的树</strong> 。普通的树并不会区分左子树和右子树，但在二叉树中，左右子树的位置是严格约定、不能交换的。对应到图上来看，也就意味着 B 和 C、D 和 E、F 和 G 是不能互换的。</p><h2 id="二叉树的编码实现" tabindex="-1">二叉树的编码实现 <a class="header-anchor" href="#二叉树的编码实现" aria-label="Permalink to &quot;二叉树的编码实现&quot;">​</a></h2><p>在 JS 中，二叉树使用对象来定义。它的结构分为三块：</p><ul><li>数据域</li><li>左侧子结点（左子树根结点）的引用</li><li>右侧子结点（右子树根结点）的引用</li></ul><p>在定义二叉树构造函数时，我们需要把左侧子结点和右侧子结点都预置为空：</p><pre><code>// 二叉树结点的构造函数
function TreeNode(val) {
    this.val = val;
    this.left = this.right = null;
}
</code></pre><p>当你需要新建一个二叉树结点时，直接调用构造函数、传入数据域的值就行了：</p><pre><code>const node  = new TreeNode(1)
</code></pre><p>如此便能得到一个值为 1 的二叉树结点，从结构上来说，它长这样：</p><p><img src="`+p+'" alt=""></p><p>以这个结点为根结点，我们可以通过给 left/right 赋值拓展其子树信息，延展出一棵二叉树。因此从更加细化的角度来看，一棵二叉树的形态实际是这样的：<br><img src="'+n+'" alt=""></p><p>现在各位已经掌握了做二叉树面试题所需要的一系列前置知识。接下来我会带大家一起通过写代码的方式，来搞定二叉树系列里最首当其冲、同时相当热门的考点——二叉树的遍历。</p><p>（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信 xyalinode 与我交流哈~）</p>',25),d=[c];function h(g,m,b,u,f,q){return a(),s("div",null,d)}const w=e(_,[["render",h]]);export{v as __pageData,w as default};
